class UpnpClient
!!!132866.java!!!	UpnpClient()

!!!132994.java!!!	initialize(inout context : Context) : boolean
		this.context = context;
		//FIXME check if this is right: Context.BIND_AUTO_CREATE kills the service after closing the activity
		return context.bindService(new Intent(context,
				UpnpRegistryService.class), this, Context.BIND_AUTO_CREATE);
		
!!!133122.java!!!	deviceAdded(in device : Device) : void
		fireDeviceAdded(device);

!!!133250.java!!!	deviceRemoved(in device : Device) : void
		fireDeviceRemoved(device);
!!!133378.java!!!	deviceUpdated(in device : Device) : void
		fireDeviceUpdated(device);
!!!133506.java!!!	fireDeviceAdded(inout device : Device<?, ?, ?>) : void
		for (UpnpClientListener listener : listeners) {
			listener.deviceAdded(device);
		}
!!!133634.java!!!	fireDeviceRemoved(inout device : Device<?, ?, ?>) : void
		for (UpnpClientListener listener : listeners) {
			listener.deviceRemoved(device);
		}
!!!133762.java!!!	fireDeviceUpdated(inout device : Device<?, ?, ?>) : void
		for (UpnpClientListener listener : listeners) {
			listener.deviceUpdated(device);
		}
!!!133890.java!!!	onServiceConnected(inout className : ComponentName, inout service : IBinder) : void

		setAndroidUpnpService(((AndroidUpnpService) service));
		refreshUpnpDeviceCatalog();

!!!134018.java!!!	onServiceDisconnected(inout className : ComponentName) : void
		setAndroidUpnpService(null);

!!!134146.java!!!	remoteDeviceDiscoveryStarted(inout registry : Registry, inout remotedevice : RemoteDevice) : void
		// TODO Auto-generated method stub

!!!134274.java!!!	remoteDeviceDiscoveryFailed(inout registry : Registry, inout remotedevice : RemoteDevice, inout exception : Exception) : void
		Log.d(getClass().getName(), "remoteDeviceDiscoveryFailed: "
				+ remotedevice.getDisplayString(), exception);
!!!134402.java!!!	remoteDeviceAdded(inout registry : Registry, inout remotedevice : RemoteDevice) : void
		Log.d(getClass().getName(),
				"remoteDeviceAdded: " + remotedevice.getDisplayString());
		deviceAdded(remotedevice);

!!!134530.java!!!	remoteDeviceUpdated(inout registry : Registry, inout remotedevice : RemoteDevice) : void
		Log.d(getClass().getName(),
				"remoteDeviceUpdated: " + remotedevice.getDisplayString());
		deviceUpdated(remotedevice);
!!!134658.java!!!	remoteDeviceRemoved(inout registry : Registry, inout remotedevice : RemoteDevice) : void
		Log.d(getClass().getName(),
				"remoteDeviceRemoved: " + remotedevice.getDisplayString());
		deviceRemoved(remotedevice);

!!!134786.java!!!	localDeviceAdded(inout registry : Registry, inout localdevice : LocalDevice) : void
		Log.d(getClass().getName(),
				"localDeviceAdded: " + localdevice.getDisplayString());
		deviceAdded(localdevice);

!!!134914.java!!!	localDeviceRemoved(inout registry : Registry, inout localdevice : LocalDevice) : void
		Log.d(getClass().getName(),
				"localDeviceRemoved: " + localdevice.getDisplayString());
		deviceRemoved(localdevice);

!!!135042.java!!!	beforeShutdown(inout registry : Registry) : void
		Log.d(getClass().getName(), "beforeShutdown: " + registry);

!!!135170.java!!!	afterShutdown() : void
		Log.d(getClass().getName(), "afterShutdown ");
!!!135298.java!!!	getAVTransportService(inout device : Device<?, ?, ?>) : Service
		ServiceId serviceId = new UDAServiceId("AVTransport");
		Service service = device.findService(serviceId);
		if (service != null) {
			Log.d(getClass().getName(),
					"Service found: " + service.getServiceId() + " Type: "
							+ service.getServiceType());
		}
		return service;
!!!135426.java!!!	waitForActionComplete(in actionState : ActionState) : void

		actionState.watchdogFlag = false;
		new Timer().schedule(new TimerTask() {

			@Override
			public void run() {
				actionState.watchdogFlag=true;				
			}
		}, 30000L); // 30sec. Watchdog

		while (!(actionState.actionFinished || actionState.watchdogFlag)) {
			// wait for local device is connected
		}
		if (actionState.watchdogFlag) {
			Log.d(getClass().getName(), "Watchdog timeout!");
		}
		
		if (actionState.actionFinished) {
			Log.d(getClass().getName(), "Action completed!");
		}
!!!135554.java!!!	intentView(in mime : String, inout uri : Uri) : void
		intentView(mime, uri, false);
!!!135682.java!!!	intentView(in mime : String, inout uri : Uri, inout background : boolean) : void
		Class activityclazz = null;
		// test if special activity to choose
		if (background) {
			if (mime.indexOf("audio") > -1) {
				Log.d(getClass().getName(), "Starting Background service... ");
				Intent svc = new Intent(context, BackgroundMusicService.class);
				svc.setData(uri);
				context.startService(svc);
			} else {
				throw new IllegalStateException(
						"no activity for starting in background found");
			}
			return;
		}

		if (mime == null) {
			activityclazz = null;

		} else if (mime.indexOf("image") > -1) {
			activityclazz = ImageViewerActivity.class;
		}

		intentView(mime, uri, activityclazz);
!!!135810.java!!!	intentView(in mime : String, inout uri : Uri, inout activityClazz : Class) : void
		Intent intent = new Intent(Intent.ACTION_VIEW);
		if (activityClazz != null) {
			intent = new Intent(context, activityClazz);
		}

		intent.setDataAndType(uri, mime);

		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

		context.startActivity(intent);
!!!135938.java!!!	addUpnpClientListener(inout listener : UpnpClientListener) : void
		listeners.add(listener);
!!!136066.java!!!	removeUpnpClientListener(inout listener : UpnpClientListener) : void
		listeners.remove(listener);
!!!136194.java!!!	getAndroidUpnpService() : AndroidUpnpService
		return androidUpnpService;
!!!136322.java!!!	getDevices() : Collection<Device>
		if (isInitialized()) {
			return getRegistry().getDevices();
		}
		return new ArrayList<Device>();
!!!136450.java!!!	getDevice(in identifier : String) : Device<?, ?, ?>
		if (isInitialized()) {
			return getRegistry().getDevice(new UDN(identifier), false);
		}
		return null;
!!!136578.java!!!	getUpnpService() : UpnpService
		if (!isInitialized()) {
			return null;
		}
		return androidUpnpService.get();
!!!136706.java!!!	isInitialized() : boolean
		return getAndroidUpnpService() != null;
!!!136834.java!!!	getConfiguration() : UpnpServiceConfiguration
		if (!isInitialized()) {
			return null;
		}
		return androidUpnpService.getConfiguration();
!!!136962.java!!!	getControlPoint() : ControlPoint
		if (!isInitialized()) {
			return null;
		}
		return androidUpnpService.getControlPoint();
!!!137090.java!!!	getRegistry() : Registry
		if (!isInitialized()) {
			return null;
		}
		return androidUpnpService.getRegistry();
!!!137218.java!!!	getContext() : Context
		return context;
!!!137346.java!!!	setAndroidUpnpService(inout upnpService : AndroidUpnpService) : void
		this.androidUpnpService = upnpService;

!!!137474.java!!!	refreshUpnpDeviceCatalog() : void
		if (isInitialized()) {
			for (Device<?, ?, ?> device : getAndroidUpnpService().getRegistry()
					.getDevices()) {
				this.deviceAdded(device);
			}

			// Getting ready for future device advertisements
			getAndroidUpnpService().getRegistry().addListener(this);

			searchDevices();
		}
!!!137602.java!!!	browseSync(inout device : Device<?, ?, ?>, in objectID : String) : ContentDirectoryBrowseResult
		return browseSync(device, objectID, BrowseFlag.DIRECT_CHILDREN, "*",
				0L, null, new SortCriterion[0]);
!!!137730.java!!!	browseSync(inout device : Device<?, ?, ?>, in objectID : String, inout flag : BrowseFlag, in filter : String, in firstResult : long, inout maxResults : Long, inout  : SortCriterion...orderBy) : ContentDirectoryBrowseResult
		Object[] services = device.getServices();
		Service service = device.findService(new UDAServiceId(
				"ContentDirectory"));
		ContentDirectoryBrowseResult result = new ContentDirectoryBrowseResult();
		ContentDirectoryBrowseActionCallback actionCallback = null;
		if (service != null) {
			Log.d(getClass().getName(),
					"#####Service found: " + service.getServiceId() + " Type: "
							+ service.getServiceType());
			actionCallback = new ContentDirectoryBrowseActionCallback(service,
					objectID, flag, filter, firstResult, maxResults, result,
					orderBy);
			getControlPoint().execute(actionCallback);
			while (actionCallback.getStatus() != Status.OK
					&& actionCallback.getUpnpFailure() == null)
				;
		}
		return result;
!!!137858.java!!!	browseAsync(inout device : Device<?, ?, ?>, in objectID : String) : ContentDirectoryBrowseResult
		return browseAsync(device, objectID, BrowseFlag.DIRECT_CHILDREN, "*",
				0L, null, new SortCriterion[0]);
!!!137986.java!!!	browseAsync(inout device : Device<?, ?, ?>, in objectID : String, inout flag : BrowseFlag, in filter : String, in firstResult : long, inout maxResults : Long, inout  : SortCriterion...orderBy) : ContentDirectoryBrowseResult
		Service service = device.findService(new UDAServiceId(
				"ContentDirectory"));
		ContentDirectoryBrowseResult result = new ContentDirectoryBrowseResult();
		ContentDirectoryBrowseActionCallback actionCallback = null;
		if (service != null) {
			Log.d(getClass().getName(),
					"#####Service found: " + service.getServiceId() + " Type: "
							+ service.getServiceType());
			actionCallback = new ContentDirectoryBrowseActionCallback(service,
					objectID, flag, filter, firstResult, maxResults, result,
					orderBy);
			getControlPoint().execute(actionCallback);
		}
		return result;
!!!138114.java!!!	searchDevices() : void
		if (isInitialized()) {
			getAndroidUpnpService().getControlPoint().search();
		}
!!!138242.java!!!	playLocal(inout transport : AVTransport) : void
		if (transport == null)
			return;
		Log.d(getClass().getName(), "TransportId: " + transport.getInstanceId());
		PositionInfo positionInfo = transport.getPositionInfo();
		if (positionInfo == null)
			return;

		Log.d(getClass().getName(), "TransportUri: " + positionInfo.getTrackURI());
		Log.d(getClass().getName(), "Duration: " + positionInfo.getTrackDuration());				
		Log.d(getClass().getName(), "TrackMetaData: " + positionInfo.getTrackMetaData());
		//FIXME Mimetype to be set
		intentView("*/*",Uri.parse(positionInfo.getTrackURI()));
!!!138370.java!!!	playLocal(inout item : Item) : void
		if (item == null)
			return;
		Log.d(getClass().getName(), "ItemId: " + item.getId());
		Res resource = item.getFirstResource();
		if (resource == null)
			return;

		Log.d(getClass().getName(), "ImportUri: " + resource.getImportUri());
		Log.d(getClass().getName(), "Duration: " + resource.getDuration());
		Log.d(getClass().getName(),
				"ProtocolInfo: " + resource.getProtocolInfo());
		Log.d(getClass().getName(), "ContentFormat: "
				+ resource.getProtocolInfo().getContentFormat());
		Log.d(getClass().getName(), "Value: " + resource.getValue());
		intentView(resource.getProtocolInfo().getContentFormat(),
				Uri.parse(resource.getValue()));

!!!138498.java!!!	playLocal(inout container : Container) : void
		playLocal(container, false);
!!!138626.java!!!	playLocal(inout container : Container, inout background : boolean) : void
		if (container == null)
			return;
		Log.d(getClass().getName(), "ContainerId: " + container.getId());
		for (Item item : container.getItems()) {

			Res resource = item.getFirstResource();
			if (resource == null)
				return;

			Log.d(getClass().getName(), "ImportUri: " + resource.getImportUri());
			Log.d(getClass().getName(), "Duration: " + resource.getDuration());
			Log.d(getClass().getName(),
					"ProtocolInfo: " + resource.getProtocolInfo());
			Log.d(getClass().getName(), "ContentFormat: "
					+ resource.getProtocolInfo().getContentFormat());
			Log.d(getClass().getName(), "Value: " + resource.getValue());
			intentView(resource.getProtocolInfo().getContentFormat(),
					Uri.parse(resource.getValue()), background);
			// Wait Duration until next Item is send to receiver intent
			// TODO intent should get a playlist instead of singel items
			SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss");
			long millis = 10000; // 10 sec. default
			if (resource.getDuration() != null) {
				try {
					Date date = dateFormat.parse(resource.getDuration());
					// silence 2 sec
					millis = date.getTime() + 2000;

				} catch (ParseException e) {
					Log.d(getClass().getName(), "bad duration format", e);

				}
			}
			try {
				Thread.sleep(millis);
			} catch (InterruptedException e) {
				Log.d(getClass().getName(), "InterruptedException ", e);

			}
		}
!!!138754.java!!!	playLocal(in imageContainer : Container, in musicContainer : Container) : void
		if (imageContainer == null || musicContainer == null)
			return;
		Log.d(getClass().getName(),
				"Image ContainerId: " + imageContainer.getId());
		Log.d(getClass().getName(),
				"Music ContainerId: " + musicContainer.getId());
		new Thread(new Runnable() {

			@Override
			public void run() {
				playLocal(musicContainer, true);

			}
		}).start();

		playLocal(imageContainer);

!!!138882.java!!!	playRemote(inout item : Item, inout remoteDevice : Device<?, ?, ?>) : void
		if (item == null || remoteDevice == null)
			return;
		Log.d(getClass().getName(), "ItemId: " + item.getId());
		Res resource = item.getFirstResource();
		if (resource == null)
			return;

		Log.d(getClass().getName(), "ImportUri: " + resource.getImportUri());
		Log.d(getClass().getName(), "Duration: " + resource.getDuration());
		Log.d(getClass().getName(),
				"ProtocolInfo: " + resource.getProtocolInfo());
		Log.d(getClass().getName(), "ContentFormat: "
				+ resource.getProtocolInfo().getContentFormat());
		Log.d(getClass().getName(), "Value: " + resource.getValue());
		Service<?, ?> service = getAVTransportService(remoteDevice);
		if(service == null) {
			Log.d(getClass().getName(), "No AVTransport-Service found on Device: " + remoteDevice.getDisplayString());
			return;
		}
		Log.d(getClass().getName(), "Action SetAVTransportURI ");
		final ActionState actionState = new ActionState();
		actionState.actionFinished=false;
		SetAVTransportURI setAVTransportURI = new InternalSetAVTransportURI(service, resource.getValue(),actionState);
		getControlPoint().execute(setAVTransportURI);						 
		waitForActionComplete(actionState);
		//Now start Playing
		Log.d(getClass().getName(), "Action Play");
		actionState.actionFinished=false;
		Play actionCallback = new Play(service) {

			@Override
			public void failure(ActionInvocation actioninvocation,
					UpnpResponse upnpresponse, String s) {
				Log.d(getClass().getName(), "Failure UpnpResponse: "
						+ upnpresponse);
				Log.d(getClass().getName(),
						"UpnpResponse: " + upnpresponse.getResponseDetails());
				actionState.actionFinished = true;

			}

			@Override
			public void success(ActionInvocation actioninvocation) {
				super.success(actioninvocation);
				actionState.actionFinished=true;

			}

		};
		getControlPoint().execute(actionCallback);
