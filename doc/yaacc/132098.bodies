class AvTransportMediaRendererStopped
!!!141826.java!!!	AvTransportMediaRendererStopped(inout transport : AVTransport, inout upnpClient : UpnpClient)
		super(transport);
		this.upnpClient = upnpClient;
!!!141954.java!!!	onEntry() : void
		Log.d(this.getClass().getName(), "On Entry");
		super.onEntry();
		// Optional: Stop playing, release resources, etc.
!!!142082.java!!!	setTransportURI(inout uri : URI, in metaData : String) : Class<? extends AbstractState>
		Log.d(this.getClass().getName(), "setTransportURI");
		         // This operation can be triggered in any state, you should think
		         // about how you'd want your player to react. If we are in Stopped
		         // state nothing much will happen, except that you have to set
		         // the media and position info, just like in MyRendererNoMediaPresent.
		         // However, if this would be the MyRendererPlaying state, would you
		         // prefer stopping first?
		         return AvTransportMediaRendererStopped.class;
!!!142210.java!!!	stop() : Class<? extends AbstractState>
		Log.d(this.getClass().getName(), "stop");
		// / Same here, if you are stopped already and someone calls STOP,
		// well...
		return AvTransportMediaRendererStopped.class;
!!!142338.java!!!	play(in speed : String) : Class<? extends AbstractState>
		Log.d(this.getClass().getName(), "play");
		// It's easier to let this classes' onEntry() method do the work
		return AvTransportMediaRendererPlaying.class;
!!!142466.java!!!	next() : Class<? extends AbstractState>
		Log.d(this.getClass().getName(), "next");
		return AvTransportMediaRendererStopped.class;
!!!142594.java!!!	previous() : Class<? extends AbstractState>
		Log.d(this.getClass().getName(), "previous");
		return AvTransportMediaRendererStopped.class;
!!!142722.java!!!	seek(inout unit : SeekMode, in target : String) : Class<? extends AbstractState>
		Log.d(this.getClass().getName(), "seek");
		// Implement seeking with the stream in stopped state!
		return AvTransportMediaRendererStopped.class;
